Bank 


// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract DBank
{
    address Owner;

    // We are creating the Mapping for the Adding & Transfer Amount in Account
    mapping(address=>uint)Balance;

    // constructor for the address of the Owner
    constructor()
    {
        Owner = msg.sender;
    }

    // function for adding the Ethereum in Account
    function addBalance(uint amount) public returns(uint)
    {
        // first we have to check the is it Owners Account or Not
        require(msg.sender == Owner, "Yes it is Owner Account !!");
        Balance[msg.sender] = Balance[msg.sender] + amount;

        return Balance[msg.sender];
    }

    // function for Get the Balance from an Account
    function getBalance() public view returns(uint)
    {
        return Balance[msg.sender];
    }

    // to transfer the Amount from Owner to Recipient
    function Transfer(address recipient, uint amount) public
    {
        // check the Self account is or not
        require(msg.sender != recipient, "Can't Transfer !! Self Account.");

        // check the owner has balance is available or not
        require(Balance[msg.sender] >= amount, "No, We Can't Transfer. Insufficient Balance !!");

        _transfer(msg.sender, recipient, amount);
    }

    function _transfer(address From, address To, uint Amount) private
    {
        Balance[From] = Balance[From] - Amount;
        Balance[To] = Balance[To] + Amount;
    }

}





================================================================================================================================



student

// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract StudentData {
    
    // Structure to store student data
    struct Student {
        uint id;
        string name;
        uint age;
        uint grade;
    }

    // Array to store multiple Student structures
    Student[] public students;

    // Mapping to keep track of student IDs to avoid duplicates
    mapping(uint => bool) private studentExists;

    // Event for adding a new student
    event StudentAdded(uint id, string name, uint age, uint grade);

    // Function to add a new student
    function addStudent(uint _id, string memory _name, uint _age, uint _grade) public {
        require(!studentExists[_id], "Student ID already exists.");
        
        Student memory newStudent = Student({
            id: _id,
            name: _name,
            age: _age,
            grade: _grade
        });
        
        students.push(newStudent);
        studentExists[_id] = true;

        emit StudentAdded(_id, _name, _age, _grade);
    }

    // Function to retrieve a student's data by array index
    function getStudent(uint index) public view returns (uint, string memory, uint, uint) {
        require(index < students.length, "Student does not exist.");
        Student memory student = students[index];
        return (student.id, student.name, student.age, student.grade);
    }

    // Function to get the total number of students
    function getStudentCount() public view returns (uint) {
        return students.length;
    }

    // Receive function to handle simple Ether transfers
    receive() external payable {
        // Logic for receiving Ether (if any) can go here
    }

    // Fallback function to handle unexpected calls or Ether with data
    fallback() external payable {
        // Additional logic for fallback, if needed
    }
}
